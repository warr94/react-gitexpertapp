{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","gifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","category","type","value","onChange","target","placeholder","GifGridItem","props","img","title","url","className","src","alt","handleGetGifs","a","encodeURI","fetch","response","json","data","jsonGifs","map","id","images","downsized_medium","GifGrid","setImages","useEffect","then","imgs","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,mCACI,sBAAMC,SAXO,SAACC,GAClBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAQ,4BAAQA,GAAR,CAAkBP,OACxCC,EAAc,MAMd,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBxB,SAACP,GAEvBF,EAAcE,EAAMQ,OAAOF,QAegDG,YAAY,mBCtBlFC,EAAc,SAACC,GAAW,IAAD,EAEXA,EAAMC,IAArBC,EAF0B,EAE1BA,MAAOC,EAFmB,EAEnBA,IAEf,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCTHK,EAAa,uCAAG,WAAOd,GAAP,uBAAAe,EAAA,6DAEnBL,EAFmB,0FAEsEM,UAAUhB,GAFhF,sBAIFiB,MAAMP,GAJJ,cAInBQ,EAJmB,gBAKFA,EAASC,OALP,uBAKjBC,EALiB,EAKjBA,KAEFC,EAAWD,EAAKE,KAAI,SAAAd,GAAQ,IAAD,EAE7B,MAAO,CACHe,GAAIf,EAAIe,GACRd,MAAOD,EAAIC,MACXC,IAAG,UAAEF,EAAIgB,cAAN,aAAE,EAAYC,iBAAiBf,QAZjB,kBAiBlBW,GAjBkB,4CAAH,sDCIbK,EAAU,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EAETR,mBAAS,IAFA,mBAE9BgC,EAF8B,KAEtBG,EAFsB,KAQrC,OAJAC,qBAAU,WACNd,EAAcd,GAAU6B,MAAK,SAAAC,GAAI,OAAIH,EAAUG,QAChD,CAAC9B,IAGA,qCACI,6BAAKA,IACL,qBAAKW,UAAU,YAAf,SAGQa,EAAOF,KAAI,SAAAd,GAAG,OACV,cAAC,EAAD,CAA0BA,IAAKA,GAAbA,EAAIe,aCfjCQ,EAAe,WAAM,MAGMvC,mBAAS,CAAC,gBAHhB,mBAGvBwC,EAHuB,KAGXzC,EAHW,KAW9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACKyC,EAAWV,KAAI,SAACpB,EAAO+B,GAEpB,OAAO,cAAC,EAAD,CAA6BjC,SAAUE,GAAzB+B,EAAQ/B,Y,MCpBjDgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c3e8466c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'; //sirve para validar los tipos de datos\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        // console.log(event.target.value)\r\n        setInputValue(event.target.value)\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(category => [...category, inputValue]);  //inputValue es el valor que se esta enviando de todo lo que esta en la etiqueta form\r\n            setInputValue(''); // sirve para limpiar el textbox cuando damos enter\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" value={inputValue} onChange={handleInputChange} placeholder=\"Buscar...\" />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = (props) => {\r\n\r\n    const { title, url } = props.img;\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const handleGetGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=piQucEbRcn0EoS6qPBlg00R6j02SCAG6&q=${encodeURI(category)}&limit=10`\r\n\r\n    const response = await fetch(url)\r\n    const { data } = await response.json()\r\n\r\n    const jsonGifs = data.map(img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n\r\n    })\r\n\r\n    return jsonGifs;\r\n\r\n}","import React, { useState, useEffect } from 'react'   //'rafc' comando inicial para crear componentes\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { handleGetGifs } from '../helpers/getGifs'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const [images, setImages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        handleGetGifs(category).then(imgs => setImages(imgs))\r\n    }, [category])\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            <div className=\"card-grid\">\r\n                {\r\n\r\n                    images.map(img => (\r\n                        <GifGridItem key={img.id} img={img} />\r\n                    ))\r\n\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'samurai X', 'Dragon Ball']\r\n    const [categories, setCategories] = useState(['pokemon xyz']);\r\n\r\n    /* const handleAdd = () => {\r\n        // setCategories([...categories, 'HunterXHunter'])   // solucion numero 1\r\n        setCategories(categs => [...categs, 'HunterXHunter'])\r\n    } */\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr></hr>\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {categories.map((value, index) => {\r\n                    // return (<li key={index + value}>{value}</li>)\r\n                    return <GifGrid key={index + value} category={value} />\r\n                })}\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './gifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}